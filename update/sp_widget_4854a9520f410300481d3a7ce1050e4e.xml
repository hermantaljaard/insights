<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function ($scope, $location, spUtil, amb, $http, spAriaUtil, $timeout,spModal,$rootScope) {
	var c = this;
	/*
 	* options:
 	* hide_footer (bool) = true to remove the data table footer contents
 	* hide_header (bool) = true to remove the data table header contents
 	* show_new (bool) = true to show the "New" record button
 	* show_keywords (bool) = true to show the keyword search field
 	* table (string) = the table name to query
 	* filter (string) = the encoded query
 	* o (string) = the order by column
 	* d (string) = The order by direction: asc or desc
 	* p (int) = the page to jump to
 	* fields (string) = comma seperated list of fields that become the list columns
 	* view (string) = the default view to load for columns, overrides fields
 	*/
	$scope.options.hide_header = true;
	$scope.options.show_breadcrumbs = false;
	$scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}];
		var keys = ['table', 'filter', 'p', 'o', 'd'];
		
		var eventNames = {
			click: 'data_table.click',
			setFilter: 'data_table.setFilter',
			setKeywords: 'data_table.setKeywords'
		};
		
		$scope.go = function(table, item) {
			var parms = {};
				parms.table = table;
				parms.sys_id = item.sys_id;
				parms.record = item;
				$scope.ignoreLocationChange = true;
				for (var x in c.data.list) {
					c.data.list[x].selected = false;
				}
				item.selected = true;
				$scope.$emit(eventNames.click, parms);
			};
			
			$scope.newRecord = function(){
				var parms = {
					id: 'form',
					table: $scope.data.table,
					view: $scope.data.view,
					sys_id: '-1'
				};
				if ($scope.data.filter != '')
					parms.query = $scope.data.filter;
				
				$location.search(parms);
			};
			
			function recoverStateFromUrl() {
				$scope.data.fields = [];
				var s = $location.search();
				for (var x in keys) {
					if (s[keys[x]]) {
						$scope.data[keys[x]] = s[keys[x]];
					}
				}
				$scope.server.update().then(function(data) {
					if (s.sys_id) {
						for (var x in data.list) {
							if (data.list[x].sys_id == s.sys_id) {
								$scope.go(s.table, data.list[x]);
							}
						}
					}
				});
			}
			
			if ($scope.options.fromUrl) {
				var origSearch = $location.search();
				$scope.$on('$locationChangeSuccess', function(e) {
					var s = $location.search();
					if (origSearch.id !== s.id)
						return;
					
					if ($scope.ignoreLocationChange){
						$scope.ignoreLocationChange = false;
						return;
					}
					
					// Helps to recover state when using the browser's back button
					recoverStateFromUrl();
				});
			}
			
			
			$scope.getNumber = function(num) {
				return new Array(num);
			}
			
			$scope.mathMin = function(v1,v2) {
				return Math.min(v1,v2);
			}
			
			function getData(updateUrl) {
				var f = $scope.data;
				spUtil.update($scope).then(function(data) {
					f.view = data.view;
					if ($scope.options.fromUrl && updateUrl)
						setPermalink(f.table, f.filter, f.o, f.d, f.p);
					
					if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
						$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);
					
					initRecordWatcher(f.table, f.filter);
				});
			}
			
			function setPermalink(table, filter, orderBy, orderDirection, page){
				$scope.ignoreLocationChange = true;
				var search = $location.search();
				angular.extend(search, {
					spa: 1,
					table: table,
					filter: filter,
					p: page,
					o: orderBy,
					d: orderDirection
				});
				$location.search(search);
			}
			
			var watcher;
			function initRecordWatcher(table, filter){
				if (watcher)
					watcher.unsubscribe();
				
				if (table && filter) {
					var watcherChannel = amb.getChannelRW(table, filter);
					amb.connect();
					watcher = watcherChannel.subscribe(function(message) {
						if (!message.data)
							return;
						switch(message.data.action) {
							case "change":
							updateRowFromRW(message);
							break;
							case "exit":
							// A record was removed
							case "enter":
							// A record was added
							default:
							spUtil.update($scope);
							break;
						}
					});
				}
			}
			
			function updateRowFromRW(message) {
				if (message.data && message.data.sys_id && $scope.data.list) {
					var row, field;
					for(var i=0;i<$scope.data.list.length; i++) {
						row = $scope.data.list[i];
						if (row.sys_id == message.data.sys_id) {
							var fields = Object.getOwnPropertyNames(message.data.record);
							for(var f in fields) {
								field = fields[f];
								if(typeof row[field] !== 'undefined') {
									row[field].display_value = message.data.record[field].display_value;
								}
							}
						}
					}
				}
			}
			
			$scope.$on('$destroy', function() {
				if (watcher)
					watcher.unsubscribe();
			});
			
			$scope.setPageNum = function(num) {
				$scope.data.p = num;
				getData(true);
				$timeout(function() {
					$scope.focusOnTableHeader();
				});
			}
			
			$scope.setOrderBy = function(field) {
				var d = "asc";
				if ($scope.data.o == field) {
					if ($scope.data.d == "asc")
						d = "desc";
					else
						d = "asc";
				}
				
				if (d === "asc") {
					spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
				} else if (d === "desc") {
					spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
				}
				
				$scope.data.o = field;
				$scope.data.d = d;
				$scope.setSearch(true);
			}
			
			$scope.setSearch = function(updateUrl) {
				$scope.data.p = 1;
				getData(updateUrl);
			}
			
			$scope.$on(eventNames.setFilter, function(e, newFilter){
				$scope.data.filter = newFilter;
				$scope.setSearch(false);
			});
			
			$scope.$on(eventNames.setKeywords, function(e, keywords){
				$scope.data.keywords = keywords;
				$scope.setSearch(false);
			});
			
			$scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter){
				$scope.data.filter = newFilter;
				$scope.setSearch(true);
			});
			
			$scope.rowsWerePruned = function() {
				if (!$scope.data.list)
					return;
				
				$scope.rowsPruned = $scope.mathMin($scope.data.window_end,$scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
				return $scope.rowsPruned > 0;
			}
			
			$scope.showFilter = function() {
				return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
			}
			
			c.appendQuery = function(query){
				if ($scope.data.filter.length > 1)
					$scope.data.filter += '^';
				$scope.data.filter += query;
				$scope.setSearch();
				
			}
			
			// Makes Widget Async
			var title = $scope.data.title;
			if ($scope.options.use_instance_title == 'true')
				title = $scope.options.title;
			$scope.data = $scope.options;
			$scope.loadingData = true;
			$scope.server.update().then(function() {
				$scope.loadingData = false;
				$scope.data.title = title;
				initRecordWatcher($scope.data.table, $scope.data.filter);
			});
			
			function parseQuery(table, queryString){
				return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response){
					return response.data.result;
				});
			}
			
			c.createQueryTerm = function(table, field, sys_id, operator){
				return $http.get('/api/now/sp/getInOutQueryTerm', {
					params: {
						table: table,
						sys_id: sys_id,
						field: field,
						operator: operator
					}
				}).then(function(response){
					if (response && response.data && response.data.result)
						return response.data.result.parts;
				});
			}
			
			c.showMatching = function(field, newTerm) {
				var queryString = $scope.data.filter;
				var eq = "";
				parseQuery($scope.data.table, queryString).then(function(oldTerms) {
					for(var i=0; i<oldTerms.length; i++){
						var term = oldTerms[i];
						if (isSameField(newTerm, term))
							continue;
						
						if (eq.length)
							eq += '^';
						
						eq += getEncodedTerm(term);
					}
					if (eq.length)
						eq += '^';
					eq += getEncodedTerm(newTerm);
					
					$scope.data.filter = eq;
					$scope.setSearch();
				});
			};
			
			c.filterOut = function(field, newTerm) {
				var eq = $scope.data.filter;
				if (eq.length)
					eq += '^';
				
				eq += getEncodedTerm(newTerm);
				$scope.data.filter = eq;
				$scope.setSearch();
			};
			
			function isSameField(t1, t2) {
				if ('left' in t1 && 'left' in t2)
					return t1.left.field === t2.left.field;
				else if ('left' in t1)
					return t1.left.field === t2.field;
				else if ('left' in t2)
					return t1.field === t2.left.field;
				return t1.field === t2.field;
			}
			
			function getEncodedTerm(term) {
				var eq;
				if (term.left) {
					eq = getEncodedTerm(term.left);
					eq += '^OR';
					eq += getEncodedTerm(term.right);
				} else {
					eq = term.field;
					eq += term.operator;
					eq += term.value;
				}
				return eq;
			}
			/************************************************************/
			
			
			$scope.previousMonth = function(){
				if($scope.data.next){
					c.data.next = $scope.data.next;
				}else{
					c.data.next = 0;
				}
				c.data.action = 'previous';
				c.data.table = $scope.data.table;
				c.data.next -= 1;
				c.server.update();
			}
			
			$scope.nextMonth = function(){
				if($scope.data.next){
					c.data.next = $scope.data.next;
				}else{
					c.data.next = 0;
				}
				c.data.action = 'next';
				c.data.table = $scope.data.table;
				c.data.next += 1;
				c.server.update();
			}
			$scope.setCurrentDate = function(){
				c.data.action = 'current';
				c.data.table = $scope.data.table;
				c.server.update();
			}
	
			$scope.location = {
				displayValue: $scope.data.loc_name,
				value: $scope.data.loc_sys_id,
				name: 'location'
			};
			
			
			$scope.$on("field.change", function(evt, parms) {
				if (parms.field.name == 'location')
					c.data.location = parms.newValue;
				
				c.server.update().then(function(response) {
					spUtil.update($scope);
				})
			});
			
			$rootScope.$on('updateDates', function(event,obj) {
				c.data.start_date = obj.start_date;
				c.data.end_date = obj.end_date;
				c.data.projects = obj.projects;
			});
			
			c.onOpen = function(user_id,date,projects_sys_ids,projects_names) {
				//ask the user for a string
				date = date.replace(/-/g,'/');
				var shared = {};
					spModal.open({
						title: 'Select a date or date range.',
						widget: '8238c4b20f4d0300481d3a7ce1050e9c',
						widgetInput: { sel_user: user_id,sel_date:date,projects_sys_ids:projects_sys_ids, projects_names:projects_names},
							shared:shared
						}).then(function() {
						  c.data.user_sys_id = user_id;
							c.data.action = 'update_prj_record';
							c.server.update();
						});
					}		
			
			spUtil.recordWatch($scope, 'x_145744_insight_m2m_users_projects', '');
				}]]></client_script>
        <controller_as>c</controller_as>
        <css>.btn-default {
    border-color: #ccc;
}
.headcol,.location-td{
  text-align:center!important;
}
.first-th{
  width:35%;
}
.margin-top-bottom{
      margin-top: 20px;
    margin-bottom: 20px;
}
th {
    text-align: center;
}
.table &gt; thead &gt; tr &gt; th {
    border-bottom:none;
}
.weekend{
  background:#b3ffff;
  width:50px!important;
}
.no-project{
  background:#B0C4DE;
}
.resource-plan-table td,th{
    white-space:nowrap;
}
.resource-plan-table th{
    text-align:right;
}
.location-btn{
  padding:0px;
  border-radius:0px!important;
  border:none;
}
.select2-container .select2-choice {
    line-height: 28px;
    border-radius: 3px;
	}
.btn-sm, .btn-group-sm &gt; .btn {
    line-height: 1.7;
}
.select2-container .select2-choice abbr {
    right: 35px;
    top: 8px;
}
.select2-results li {
    font-size: 0.9em!important;
}

/**************************Fixed First Column*************/

.scrolling table {
    table-layout: inherit;
 *margin-left: -100px;/*ie7*/
}
.scrolling td, th {
  vertical-align: top;
	//min-width: 100px;
  white-space:nowrap;
}
.scrolling thead td {
  text-align:right;
}
.scrolling th {
	position: absolute;
 *position: relative; /*ie7*/
	left: 0;
	width: 120px;
}
.outer {
	position: relative
}
.inner {
	overflow-x: auto;
	overflow-y: visible;
	margin-left: 120px;
}


/***************************************************/



.panel-heading {
  padding-left: 8px;
}

thead {
  border-bottom: 1px solid #ddd;
}

table {
  margin-bottom: 0;
}

.table &gt; thead &gt; tr &gt; th {
  border: 1px solid #ddd;
  cursor: pointer;
  vertical-align: middle;

  &amp;:nth-child(2) {
    border-left: none;
  }



  &amp;:last-child {
    border-right: none;
  }
}

th i {
  display: inline-block;
  margin-left: 5px;
  color: #A0A0A0;
}

th .disabled{
  color:#ddd;
}

.th-title {
  display: inline-block;
  color: $primary;
}

.panel-body {
  overflow: auto;
  padding: 0px;
}


.selected {
  color: #fff;
  background-color: #909090;
  border-color: 1px solid #fff;
}

tbody tr:last-child {
  border-bottom: none;
}

.pruned-msg {
  padding-bottom: 10px;
  padding-left: 4px;
  text-align: center;
}

.pruned-msg-filter-pad {
  padding-top:8px;
}

.filter-breadcrumbs {
  border-bottom: 1px solid #ddd;
  padding-top: 3px;
}

.dropdown-toggle {
  background: none;
  padding: 0 0 4px 0;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data>{"data":
	{
		"table": "incident",
		"view": "default",
		"o": "opened_at",
		"d": "desc",
		"filter": "activeEQtrue",
		"p": 1,
		"fields": "number,short_description"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list>title,maximum_entries,glyph,color,sp_page,field_list,table,filter,order,order_by,order_direction</field_list>
        <has_preview>false</has_preview>
        <id>insight-res-planner-data-table</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl){
	var $ul, $contextMenu;
	
	scope.focusOnTableHeader = function() {
		element.find(".data-table-title").attr("tabindex", "-1").focus();
	}
	
	element.on('contextmenu', function(e){
		if (e.ctrlKey)
			return; // ctrlKey is for the debug menu, not this menu
		
		var rowScope = angular.element(e.target).scope();
		var field, item, fieldVal;
		
		// Context Menu for tbody
		if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){
			e.preventDefault();
			field = rowScope.field;
			item = rowScope.item;
			fieldVal = item[field].value;
			
			var items = [
			['${Show Matching}', function(){
				ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){
					ctrl.showMatching(field, term);
				});
			}],
			['${Filter Out}', function(){
				ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){
					ctrl.filterOut(field, term);
				});
			}]
			];
			
			renderContextMenu(items);
			setContextMenuPosition(e);
		}
	});
	
	function renderContextMenu(items){
		var scrollHeight = $('body').get(0).scrollHeight;
		$contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'});
			
			$contextMenu.on('click', function (e) {
				if ($(e.target).hasClass('dropdown')) {
					_clearContextMenus(event);
				}
			});
			$contextMenu.on('contextmenu', function (event) {
				event.preventDefault();
				_clearContextMenus(event);
			});
			
			$contextMenu.css({
				position: 'absolute',
				top: 0,
				height: scrollHeight,
				left: 0,
				right: 0,
				zIndex: 9999
			});
			
			$('body').append($contextMenu);
			
			$ul = angular.element('<ul>', {
				'class': 'dropdown-menu',
				'role': 'menu'
			});
			renderItems();
			$contextMenu.append($ul);
			
			function renderItems(){
				angular.forEach(items, function (item) {
					var $li = angular.element('<li>');
					
					if (item === null) {
						$li.addClass('divider');
					} else {
						var $a = angular.element('<a>');
						$a.attr({tabindex: '-1', href:'#'});
							$a.text(item[0]);
							$li.append($a);
							$li.on('click', function (e) {
								e.preventDefault();
								scope.$apply(function () {
									_clearContextMenus(e);
									item[1].call(item, item);
								});
							});
						}
						
						$ul.append($li);
					});
				}
			}
			
			function _clearContextMenus(event){
				if (!event){
					return;
				}
				
				angular.element(event.currentTarget).removeClass('context');
				
				var els = angular.element(".context-dropdown");
				angular.forEach(els, function(el){
					angular.element(el).remove();
				});
			}
			
			var contextMenuItemHeight = 0;
			function setContextMenuPosition(event){
				if (contextMenuItemHeight === 0)
					contextMenuItemHeight = $ul.children(0).height();
				
				// Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
				// that can cause IE10 to take 200ms to render a context menu.
				var cmWidth = 150;
				var cmHeight = contextMenuItemHeight * $ul.children().length;
				var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
				var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;
				
				$ul.css({
					display: 'block',
					position: 'absolute',
					left: startX,
					top: startY,
					'min-width': cmWidth
				});
			}
		}]]></link>
        <name>Insight Resource Planner Data Table</name>
        <option_schema>[{"hint":"If enabled, show the list filter in the breadcrumbs of the data table","name":"enable_filter","default_value":"false","label":"Enable Filter","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[(function() {
	if (!input) // asynch load list
		return;
	
	data.msg = {};
		data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
		data.msg.sortingByDesc = gs.getMessage("Sorting by descending");
		
		data.title = options.title || input.title;
	
	
					var logged_in_user = gs.getUserID();
					var logged_in_user_gr = new GlideRecord('sys_user');
					if(logged_in_user_gr.get(logged_in_user)){
						data.location = logged_in_user_gr.getValue('location');
						data.loc_sys_id = data.location;
						data.loc_name = logged_in_user_gr.getDisplayValue('location');
					}
					
					
					if(input && input.location){
						data.location = input.location;
						var location = new GlideRecord('cmn_location');
						location.addActiveQuery();
						location.addQuery('sys_id',data.location);
						location.query();
						while(location.next()){
							data.loc_sys_id = location.getUniqueValue();
							data.loc_name = location.getDisplayValue('name');
						}
					}
	
	
		
		/*
 		* data.table = the table
 		* data.p = the current page starting at 1
 		* data.o = the order by column
 		* data.d = the order by direction
 		* data.keywords = the keyword search term
 		* data.list = the table data as an array
 		* data.invalid_table = true if table is invalid or if data was not succesfully fetched
 		* data.table_label = the table's display name. e.g. Incident
 		* data.table_plural = the table's plural display name. e.g. Incidents
 		* data.fields = a comma delimited list of field names to show in the data table
 		* data.column_labels = a map of field name -> display name
 		* data.window_size = the number of rows to show
 		* data.filter = the encoded query
 		*/
		// copy to data[name] from input[name] || option[name]
	
		data.o = 'name';
		data.d = 'asc';
		options.hide_header = 'true';
		optCopy(['table', 'p', 'o', 'd', 'filter', 'filterACLs', 'fields', 'keywords', 'view']);
		optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id', 'window_size']);
		if (!data.table) {
			data.invalid_table = true;
			data.table_label = "";
			return;
		}
		
		if (!data.fields) {
			if (data.view)
				data.fields = $sp.getListColumns(data.table, data.view);
			else
				data.fields = $sp.getListColumns(data.table);
		}
		
		data.view = data.view || 'mobile';
		data.table = data.table || $sp.getValue('table');
		data.filter = data.filter || $sp.getValue('filter');
		data.keywords = data.keywords || $sp.getValue('keywords');
		data.p = data.p || $sp.getValue('p') || 1;
		data.p = parseInt(data.p);
		data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by');
		data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction');
		data.page_index = data.p - 1;
		data.show_new = data.show_new || options.show_new;
		var windowSize = data.window_size || $sp.getValue('maximum_entries') || 20;
		windowSize = parseInt(windowSize);
		if (isNaN(windowSize) || windowSize < 1)
			windowSize = 20;
		data.window_size = windowSize;
		
		/**********************************************************************************/
		
		data.m2m_users_table = 'x_145744_insight_m2m_users_projects';
		
		
		if(input){
			data.pre = input.pre;
			data.next = input.next;
			
		}
		
		data.is_current_month = false;
		data.today = new GlideDateTime();
		data.this_month = data.today.getMonthLocalTime();
		data.gdt = new GlideDateTime() || input.gdt;
		data.gdt = (data.gdt).getLocalDate();
		if(input){
			if(input.action == 'previous' || input.action == 'next'){
				data.gdt.addMonthsLocalTime(data.next);
			}
			/*else if(input && input.action == 'next'){
				data.gdt.addMonthsLocalTime(data.next);
			}*/else if(input.action == 'current'){
				data.gdt = new GlideDateTime();
			}else if(input.action == 'current'){
				data.gdt = new GlideDateTime();
			}else if(input.action == 'update_prj_record'){
				var start_date = (input.start_date).replace(/\//g,'-');
				var end_date = (input.end_date).replace(/\//g,'-');
				var user = input.user_sys_id;
				var projects = input.projects;
				var m2m_users_table_gr = new GlideRecord(data.m2m_users_table);
				m2m_users_table_gr.addQuery('user',user);
				m2m_users_table_gr.query();
				if(m2m_users_table_gr.next()){
					var start_date = new GlideDateTime(start_date);
					var end_date = new GlideDateTime(end_date);
					var short_time_prj_all = m2m_users_table_gr.getDisplayValue('dates');//Short term project allocation
				//	m2m_users_table_gr.setValue('dates','');
				//  m2m_users_table_gr.update();
					var dates_obj = {};
					if(short_time_prj_all != ''){
						var short_time_prj_all_obj = JSON.parse(short_time_prj_all);
						dates_obj = short_time_prj_all_obj;
					}
					//if(start_date.compareTo(end_date) == -1){
						while(start_date <= end_date){
							var date = start_date.getDate();
						  dates_obj[date] = projects;
							for(var i in dates_obj){
								if(i==date){
									dates_obj[i] = projects;
								}
							}
							start_date.addDaysLocalTime(1);
						}
					  var dates_obj_str = JSON.stringify(dates_obj);
					//	gs.addInfoMessage(dates_obj_str);
						m2m_users_table_gr.setValue('dates',dates_obj_str);
					//}
					m2m_users_table_gr.update();
				}else{
					m2m_users_table_gr.initialize();
					m2m_users_table_gr.user = sys_id;
					m2m_users_table_gr.insert();
										var start_date = new GlideDateTime(start_date);
					var end_date = new GlideDateTime(end_date);
					var short_time_prj_all = m2m_users_table_gr.getDisplayValue('dates');//Short term project allocation
				//	m2m_users_table_gr.setValue('dates','');
				//  m2m_users_table_gr.update();
					var dates_obj = {};
					if(short_time_prj_all != ''){
						var short_time_prj_all_obj = JSON.parse(short_time_prj_all);
						dates_obj = short_time_prj_all_obj;
					}
					//if(start_date.compareTo(end_date) == -1){
						while(start_date <= end_date){
							var date = start_date.getDate();
						  dates_obj[date] = projects;
							for(var i in dates_obj){
								if(i==date){
									dates_obj[i] = projects;
								}
							}
							start_date.addDaysLocalTime(1);
						}
					  var dates_obj_str = JSON.stringify(dates_obj);
					//	gs.addInfoMessage(dates_obj_str);
						m2m_users_table_gr.setValue('dates',dates_obj_str);
					//}
					m2m_users_table_gr.update();
			}
			}
		}
		
		//Month Calculations
		data.months = ["January", "February", "March", "April", "May", "June",
		"July", "August", "September", "October", "November", "December"
		];
		data.weekdays = [" ", "Tue", "Wed", "Thu", "Fri","Sat","Sun","Mon"];
		data.month = {};
			data.month.num = data.gdt.getMonthLocalTime();
			if(data.this_month == data.month.num){
				data.is_current_month = true;
			}
			data.month.name = data.months[data.month.num-1];
			data.month.total_days = data.gdt.getDaysInMonthLocalTime();
			data.year = data.gdt.getYearLocalTime();
			data.month.day = parseInt(data.gdt.getDayOfMonthLocalTime());
			var dt = new GlideDateTime(data.gdt);
			var today = parseInt('-'+data.month.day);
			dt.addDaysLocalTime(today);
			data.month.start = dt;
			data.month.days = [];
			getDaysOfMonth(data.month.days,data.month.total_days,dt);
			data.users = [];
			
			// 			var resources = new GlideRecord('sys_user');
			// 			resources.setLimit(10);
			// 			resources.query();
			// 			while(resources.next()){
				// 				var user = {};
					// 					user.days = [];
					// 					user.name = resources.getDisplayValue('name');
					// 					user.location = resources.getDisplayValue('location');
					// 					user.sys_id = resources.getUniqueValue();
					// 					getDaysOfMonthUsers(user.days,data.month.total_days,user.sys_id);
					// 					data.users.push(user);
					// 				}

					/**********************************************************************************/
					
					var gr;
					/*if (gs.getProperty("glide.security.ui.filter") == "true" || GlideTableDescriptor.get(data.table).getED().hasAttribute("glide.security.ui.filter")) {
						gr = new FilteredGlideRecord(data.table);
						gr.applyRowSecurity();
					} else*/
					gr = new GlideRecordSecure(data.table);
					if (!gr.isValid()) {
						data.invalid_table = true;
						data.table_label = data.table;
						return;
					}
					
					data.canCreate = gr.canCreate();
					data.table_label = gr.getLabel();
					//data.table_plural = gr.getPlural();
					if (data.filter) {
						if (data.filterACLs)
							gr = $sp.addQueryString(gr, data.filter);
						else
							gr.addEncodedQuery(data.filter);
					}
					
					if (data.keywords){
						gr.addQuery('123TEXTQUERY321', data.keywords);
						data.keywords = null;
					}
					
					data.filter = gr.getEncodedQuery();
					
					if (data.relationship_id) {
						var rel = GlideRelationship.get(data.relationship_id);
						var target = new GlideRecord(data.table);
						var applyTo = new GlideRecord(data.apply_to);
						applyTo.get("sys_id", data.apply_to_sys_id);
						rel.queryWith(applyTo, target); // put the relationship query into target
						gr.addEncodedQuery(target.getEncodedQuery()); // get the query the relationship made for us
					}
					
					if (data.o){
						if (data.d == "asc")
							gr.orderBy(data.o);
						else
							gr.orderByDesc(data.o);
					}
					
					data.window_start = data.page_index * data.window_size;
					data.window_end = (data.page_index + 1) * data.window_size;
					gr.chooseWindow(data.window_start, data.window_end);
					gr.orderBy('name');
					//filter by location
					if(data.location){
						gr.addQuery('location',data.location);
					}
					gr._query();
					
					data.row_count = gr.getRowCount();
					data.num_pages = Math.ceil(data.row_count / data.window_size);
					data.column_labels = {};
						data.fields_array = data.fields.split(',');
						
						// use GlideRecord to get field labels vs. GlideRecordSecure
						var grForLabels = new GlideRecord(data.table);
						for (var i in data.fields_array) {
							var field = data.fields_array[i];
							var ge = grForLabels.getElement(field);
							if (ge == null)
								continue;
							
							data.column_labels[field] = ge.getLabel();
						}
						
						data.list = [];
						while (gr._next()) {
							var record = {};
								$sp.getRecordElements(record, gr, data.fields);
								//if (gr instanceof FilteredGlideRecord) {
									// FilteredGlideRecord doesn't do field-level
									// security, so take care of that here
									record.days = [];
									record.name = gr.getDisplayValue('name');
									record.location = gr.getDisplayValue('location');
									record.sys_id = gr.getValue('sys_id');
									getDaysOfMonthUsers(record.days,data.month.total_days,record.sys_id);
									for (var f in data.fields_array) {
										var fld = data.fields_array[f];
										if (!gr.isValidField(fld))
											continue;
										
										if (!gr[fld].canRead()) {
											record[fld].value = null;
											record[fld].display_value = null;
										}
									}
									//}
									data.list.push(record);
								}
								
								data.enable_filter = (input.enable_filter == true || input.enable_filter == "true" ||
								options.enable_filter == true || options.enable_filter == "true");
								var breadcrumbWidgetParams = {
									table: data.table,
									query: data.filter,
									enable_filter: data.enable_filter
								};
								data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);
								
								// copy to data from input or options
								function optCopy(names) {
									names.forEach(function(name) {
										data[name] = input[name] || options[name];
									})
								}
								
							})();
							
							function getDaysOfMonth(arr,totalDaysInMonth){
								var newGdtObject = new GlideDateTime(data.month.start);
								for(var i = 1;i <= totalDaysInMonth;i++){
									var day = {};
										day.day_num = parseInt(i);
										if(i == 1)
											day.date = newGdtObject;
										else{
											newGdtObject.addDaysLocalTime(1)
											day.date = newGdtObject;
										}
										//day.date.addSeconds(120);
										day.week_day_num = day.date.getDayOfWeekLocalTime();
										day.week_day_num = parseInt(day.week_day_num);
										day.week_day_name = data.weekdays[parseInt(day.week_day_num)];
										if(day.week_day_name == 'Sat' || day.week_day_name == 'Sun'){
											day.is_weekend = true;
											
										}
										else{
											day.is_weekend = false;
										}
										arr.push(day);
									}
								}
								
								function getDaysOfMonthUsers(arr,totalDaysInMonth,sys_id){
									var newGdtUserObject = new GlideDateTime(data.month.start);
									//gs.addInfoMessage(newGdtUserObject);
									for(var i = 1;i <= totalDaysInMonth;i++){
										
										var day = {};
											day.day_num = parseInt(i);
											if(i == 1)
												day.date = newGdtUserObject;
											else{
												newGdtUserObject.addDaysLocalTime(1)
												day.date = newGdtUserObject;
											}
											day.user = sys_id;
											day.class_name = day.date.getDate()+'-'+day.user;
											day.projects_sys_ids = [];
											day.projects_names = [];
											var projects = new GlideRecord(data.m2m_users_table);
											projects.addQuery('user',sys_id);
											projects.query();
											if(projects.next()){
												
												var current_date = new GlideDateTime(day.date);
												var start_date = new GlideDateTime(projects.getValue('start_date'));
												var end_date = new GlideDateTime(projects.getValue('end_date'));
												if(current_date.onOrAfter(start_date) && current_date.onOrBefore(end_date)){
													day.projects_sys_ids.push(projects.getValue('projects'));
													day.projects_names.push(projects.getDisplayValue('projects'));
													/*var prj = {};
														prj.sys_id = projects.getValue('projects');
														prj.name = projects.getDisplayValue('projects');
														prj.user = sys_id;
														day.projects.push(prj);*/
													}
												var short_time_prj_all = projects.getValue('dates');
												var short_time_prj_all_arr = JSON.parse(short_time_prj_all);
												for(var k in short_time_prj_all_arr){
													var dt = new GlideDateTime(k);
													if(day.date.compareTo(dt) == 0){
														var short_trm_prjects = short_time_prj_all_arr[k];
														var prj = new GlideRecord('x_145744_insight_project');
														prj.addQuery('sys_id','IN',short_trm_prjects);
														prj.query();
														while(prj.next()){
															day.projects_sys_ids.push(prj.getUniqueValue());
															day.projects_names.push(prj.getValue('short_description'));
														}
													}
												}
												}
													
										    day.projects_names = day.projects_names.filter(onlyUnique);
										    day.projects_sys_ids = day.projects_sys_ids.filter(onlyUnique);
												day.projects_names = day.projects_names.toString();
												day.projects_sys_ids = day.projects_sys_ids.toString();
												if(day.projects_names == ''){
													day.no_project = true;
													day.projects_names = '  ';
												}else
												day.no_project = false;
												
												day.week_day_num = day.date.getDayOfWeekLocalTime();
												day.week_day_num = parseInt(day.week_day_num);
												day.week_day_name = data.weekdays[parseInt(day.week_day_num)];
												if(day.week_day_name == 'Sat' || day.week_day_name == 'Sun'){
													day.is_weekend = true;
													
												}
												else{
													day.is_weekend = false;
												}
												day.date = (day.date).getDate().getDisplayValue();
												arr.push(day);
											}
										}

function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
}]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>Subhash.U</sys_created_by>
        <sys_created_on>2017-09-09 02:21:14</sys_created_on>
        <sys_id>4854a9520f410300481d3a7ce1050e4e</sys_id>
        <sys_mod_count>248</sys_mod_count>
        <sys_name>Insight Resource Planner Data Table</sys_name>
        <sys_package display_value="Insight" source="x_145744_insight">eb94f9120f240300481d3a7ce1050efc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Insight">eb94f9120f240300481d3a7ce1050efc</sys_scope>
        <sys_update_name>sp_widget_4854a9520f410300481d3a7ce1050e4e</sys_update_name>
        <sys_updated_by>Subhash.U</sys_updated_by>
        <sys_updated_on>2017-09-11 12:25:10</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{options.color}} b">

	<!-- body -->
	<div class="panel-body">
		<!--table class="table table-striped table-responsive" ng-if="data.list.length">
        <thead>
          <tr>
            <th class="sr-only"></th>
            <th ng-repeat="field in data.fields_array track by $index" ng-click="setOrderBy(field)" tabindex="0">
              <div class="th-title" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
              <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="item in data.list track by item.sys_id">
            <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item)" aria-label="${Open record}"></td>
            <td role="text" aria-label="{{item[field].display_value}}" class="pointer" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in data.fields_array" data-field="{{field}}" data-th="{{data.column_labels[field]}}">{{item[field].display_value}}</td>
          </tr>
        </tbody>
      </table-->
		<div class="table-responsive">
			<table class="table">
				<thead>
					<tr>
						<th class="first-th">
							<div class="btn-group btn-group-sm">
								<button class="btn btn-default" ng-click="previousMonth();" type="button">
									<em class="glyphicon glyphicon glyphicon-triangle-left"></em>
								</button>  
								<button type="button" ng-class="{'active':data.is_current_month}" ng-disabled="data.is_current_month" ng-click="setCurrentDate();" class="btn btn-default btn-sm">
									${This Month}
								</button>
                <button class="btn btn-default" ng-click="nextMonth();" type="button">
									<em class="glyphicon glyphicon glyphicon-triangle-right"></em>
								</button>
							</div>
						</th>
						<th><h3 class="text-center text-primary">
								{{data.month.name}} - {{data.year}}
							</h3></th>
						<th><label>${Select a location}&nbsp;&nbsp;</label>
							<div class="btn-group btn-group-sm">
								<button type="button" ng-click="setCurrentDate();" class="btn btn-default btn-sm location-btn">
									<sn-record-picker field="location" table="'cmn_location'" display-field="'name'" multiple="false" value-field="'sys_id'" search-fields="'name'" page-size="100" ></sn-record-picker>
								</button>
							</div>
						</th>
					</tr>
				</thead>
			</table>
		</div>
		
		<h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
		<div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
			<sp-widget widget="data.filterBreadcrumbs"></sp-widget>
		</div>
		<div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
			${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
		</div>
		<div class="alert alert-info" ng-if="loadingData">
			<fa name="spinner" spin="true"></fa> ${Loading data}...
		</div>

		<div ng-if="data.list.length">
			<div  class="table-responsive scrolling outer">
				<div class="inner">          
					<div id="scroller">
						<table class="table table-bordered table-hover resource-plan-table">
							<thead>
								<tr>
                  <th class="headcol" ng-click="setOrderBy('name')"><strong>${Enabler}</strong>
									<!--	<i class="fa" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } ${Name} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i> -->
                    <div>&nbsp;</div>
									</th>
									<td class="location-td"><strong>${Location}</strong>
                  </td>
									<td ng-repeat="day in data.month.days" ng-class="{'weekend': day.is_weekend == true}"><div><strong>{{day.day_num}}</strong></div><div><small>{{day.week_day_name}}</small></div></td>
								</tr>
							</thead>
							<tbody>
								<tr ng-repeat = "user in data.list">
                  <th class="headcol"><strong>{{user.name}}</strong></th>
									<td>{{user.location}}</td>
									<td class="{{d.class_name}}" ng-dblclick="c.onOpen(d.user,d.date,d.projects_sys_ids,d.projects_names)" ng-repeat="d in user.days" data-mon-date="{{d.date}}" data-sys_id="{{d.user}}" data-week-day="{{d.week_day_name}}" ng-disabled="d.is_weekend" ng-class="{'weekend': d.is_weekend,'tooltipcust': !d.is_weekend,'no-project': d.no_project && !d.is_weekend}">
										<small ng-if="d.no_project">&nbsp;</small>
										<small ng-if="!d.is_weekend">{{d.projects_names}}</small>
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>

			<!--------------Location buttons---------------->
			<!--div class="btn-group btn-group-sm">
			<button ng-repeat="loc in data.locations" type="button" class="btn btn-primary">{{loc.display_value}}</button>
		</div-->
		</div>

		<div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
			<span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
			<span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
		</div>
	</div>
	<!-- footer -->
	<div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
		<div class="btn-toolbar m-r pull-left">
			<div class="btn-group">
				<a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"  aria-label="${Previous page}"><i class="fa fa-chevron-left"></i></a>
			</div>
			<div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
					<a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}">{{$index + 1}}</a>
				</div>
				<div class="btn-group">
					<a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default" aria-label="${Next page}"><i class="fa fa-chevron-right"></i></a>
				</div>
			</div>
			<div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>

			<span class="clearfix"></span>
		</div>
	</div>

]]></template>
    </sp_widget>
</record_update>
